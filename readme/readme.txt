//cap quyen thu muc npm
sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}
npm install -g generator-jhipster
    npm install -g generator-jhipster@7.1.0     //redux bt, <>redux toolkit
    package.json
    webpack-cli: 4.9.1
    workbox-webpack-plugin: 
    npm install --save-exact history@4.10.1
mkdir myApp && cd myApp
jhipster
jhipster --version
8.4.0
https://www.jhipster.tech/
domain: modal
webapp: react->web/rest: controller->service->repository->db

./mvnw
npm run e2e         *** hay

jhipster heroku

jhipster jdl ./jdl/sql.jdl --ignore-application
jhipster jdl ./readme/sql.jdl

ynarxdeiH
y) overwrite
n) do not overwrite
a) overwrite this and all others
r) reload file (experimental)
x) abort
d) show the differences between the old and the new
e) edit file (experimental)
i) ignore, do not overwrite and remember (experimental)
h) Help, list all options

n·∫øu s·ª≠a jdl xong m√† k ch·∫°y ƒë∆∞·ª£c th√¨ x√≥a database trong mysql ƒëi
v√¨ liquidbase n√≥ k th·ªÉ thay ƒë·ªïi table ƒë√£ t·∫°o

https://devforum.okta.com/t/build-a-photo-gallery-pwa-with-react-spring-boot-and-jhipster/16888

url: jdbc:mysql://localhost:3306/jhSeaPort2?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true
username: root
password: 1111


  ${AnsiColor.GREEN}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó${AnsiColor.CYAN} ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
  ${AnsiColor.GREEN}‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù${AnsiColor.CYAN} ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
  ${AnsiColor.GREEN}   ‚ñà‚ñà‚ïë   ${AnsiColor.CYAN} ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
  ${AnsiColor.GREEN}   ‚ñà‚ñà‚ïë   ${AnsiColor.CYAN} ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë
  ${AnsiColor.GREEN}   ‚ñà‚ñà‚ïë   ${AnsiColor.CYAN} ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
  ${AnsiColor.GREEN}   ‚ïö‚ïê‚ïù   ${AnsiColor.CYAN}  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù

${AnsiColor.BRIGHT_BLUE}:: JHipster ü§ì  :: Running Spring Boot ${spring-boot.version} :: Startup profile(s) ${spring.profiles.active} ::

__/\\\\\\\\\\\\\\\__/\\\________/\\\_____/\\\\\\\\\_____/\\\\\_____/\\\____________/\\\\____________/\\\\__/\\\\\\\\\\\\\\\_____/\\\\\\\\\____        
 _\///////\\\/////__\/\\\_______\/\\\___/\\\\\\\\\\\\\__\/\\\\\\___\/\\\___________\/\\\\\\________/\\\\\\_\///////\\\/////____/\\\\\\\\\\\\\__       
  _______\/\\\_______\/\\\_______\/\\\__/\\\/////////\\\_\/\\\/\\\__\/\\\___________\/\\\//\\\____/\\\//\\\_______\/\\\________/\\\/////////\\\_      
   _______\/\\\_______\/\\\_______\/\\\_\/\\\_______\/\\\_\/\\\//\\\_\/\\\___________\/\\\\///\\\/\\\/_\/\\\_______\/\\\_______\/\\\_______\/\\\_     
    _______\/\\\_______\/\\\_______\/\\\_\/\\\\\\\\\\\\\\\_\/\\\\//\\\\/\\\___________\/\\\__\///\\\/___\/\\\_______\/\\\_______\/\\\\\\\\\\\\\\\_    
     _______\/\\\_______\/\\\_______\/\\\_\/\\\/////////\\\_\/\\\_\//\\\/\\\___________\/\\\____\///_____\/\\\_______\/\\\_______\/\\\/////////\\\_   
      _______\/\\\_______\//\\\______/\\\__\/\\\_______\/\\\_\/\\\__\//\\\\\\___________\/\\\_____________\/\\\_______\/\\\_______\/\\\_______\/\\\_  
       _______\/\\\________\///\\\\\\\\\/___\/\\\_______\/\\\_\/\\\___\//\\\\\___________\/\\\_____________\/\\\_______\/\\\_______\/\\\_______\/\\\_ 
        _______\///___________\/////////_____\///________\///__\///_____\/////____________\///______________\///________\///________\///________\///__


yarn add react-slick slick-carousel
>app.scss
@import "~slick-carousel/slick/slick.css";
@import "~slick-carousel/slick/slick-theme.css";

.jh-navbar {
  background-color: rgb(153, 0, 0);

# Thi·∫øt l·∫≠p JAVA_HOME cho Java 21
export JAVA_HOME=$(/usr/libexec/java_home -v 21)
export PATH=$JAVA_HOME/bin:$PATH

source ~/.zshrc

./mvnw

Trong IntelliJ IDEA, b·∫°n c√≥ th·ªÉ th·ª±c hi·ªán c√°c b∆∞·ªõc t∆∞∆°ng t·ª± ƒë·ªÉ ch·∫°y ·ª©ng d·ª•ng JHipster c·ªßa m√¨nh m√† kh√¥ng g·∫∑p l·ªói datasource. D∆∞·ªõi ƒë√¢y l√† h∆∞·ªõng d·∫´n chi ti·∫øt:

  1. Ch·∫°y v·ªõi Spring Profile
  ƒê·ªÉ ch·∫°y ·ª©ng d·ª•ng v·ªõi m·ªôt Spring profile c·ª• th·ªÉ trong IntelliJ IDEA:

  M·ªü ph·∫ßn c·∫•u h√¨nh ch·∫°y (Run Configuration) b·∫±ng c√°ch nh·∫•p v√†o Run tr√™n thanh menu v√† ch·ªçn Edit Configurations....
  T·∫°o m·ªôt c·∫•u h√¨nh ch·∫°y m·ªõi ho·∫∑c ch·ªânh s·ª≠a c·∫•u h√¨nh hi·ªán t·∫°i c·ªßa b·∫°n.
  Trong ph·∫ßn VM options, th√™m -Dspring.profiles.active=dev ƒë·ªÉ thi·∫øt l·∫≠p profile. V√≠ d·ª•:
  plaintext
  Copy code
  -Dspring.profiles.active=dev
  2. Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng
  B·∫°n c≈©ng c√≥ th·ªÉ thi·∫øt l·∫≠p c√°c bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt:

  Trong ph·∫ßn c·∫•u h√¨nh ch·∫°y, t√¨m v√† nh·∫•p v√†o tab Configuration.
  Trong ph·∫ßn Environment variables, th√™m c√°c bi·∫øn m√¥i tr∆∞·ªùng nh∆∞ SPRING_DATASOURCE_URL, SPRING_DATASOURCE_USERNAME, v√† SPRING_DATASOURCE_PASSWORD.
  3. ƒê·∫£m b·∫£o Classpath ƒë√∫ng
  IntelliJ IDEA th∆∞·ªùng s·∫Ω t·ª± ƒë·ªông thi·∫øt l·∫≠p classpath ƒë√∫ng n·∫øu b·∫°n ƒë√£ import d·ª± √°n Maven ho·∫∑c Gradle. ƒê·∫£m b·∫£o r·∫±ng b·∫°n ƒë√£ import d·ª± √°n nh∆∞ m·ªôt d·ª± √°n Maven b·∫±ng c√°ch:

  Nh·∫•p chu·ªôt ph·∫£i v√†o file pom.xml v√† ch·ªçn Add as Maven Project.
  Ch·ªù IDEA t·∫£i v√† c·∫•u h√¨nh c√°c dependency.
  4. Build d·ª± √°n
  ƒê·∫£m b·∫£o r·∫±ng d·ª± √°n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c build tr∆∞·ªõc khi ch·∫°y:

  Nh·∫•p v√†o Build tr√™n thanh menu v√† ch·ªçn Build Project ho·∫∑c Rebuild Project.
  5. Ch·∫°y ·ª©ng d·ª•ng
  Sau khi thi·∫øt l·∫≠p t·∫•t c·∫£ c√°c c·∫•u h√¨nh tr√™n, b·∫°n c√≥ th·ªÉ ch·∫°y ·ª©ng d·ª•ng b·∫±ng c√°ch nh·∫•p v√†o n√∫t Run (h√¨nh tam gi√°c m√†u xanh) tr√™n thanh c√¥ng c·ª• ho·∫∑c s·ª≠ d·ª•ng ph√≠m t·∫Øt Shift + F10.

  T√≥m t·∫Øt c√°c b∆∞·ªõc c·ª• th·ªÉ
  M·ªü Run Configuration:

  Run > Edit Configurations...
  Thi·∫øt l·∫≠p Spring Profile:

  Trong tab Configuration, th√™m -Dspring.profiles.active=dev v√†o VM options.
  Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng:

  Trong tab Configuration, th√™m bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt v√†o Environment variables.
  Import d·ª± √°n Maven:

  Nh·∫•p chu·ªôt ph·∫£i v√†o pom.xml > Add as Maven Project.
  Build d·ª± √°n:

  Build > Build Project ho·∫∑c Rebuild Project.
  Ch·∫°y ·ª©ng d·ª•ng:

  Nh·∫•p v√†o n√∫t Run ho·∫∑c s·ª≠ d·ª•ng ph√≠m t·∫Øt Shift + F10.
  V·ªõi c√°c b∆∞·ªõc n√†y, b·∫°n s·∫Ω ƒë·∫£m b·∫£o r·∫±ng ·ª©ng d·ª•ng c·ªßa b·∫°n c√≥ ƒë·∫ßy ƒë·ªß c√°c c·∫•u h√¨nh v√† dependency c·∫ßn thi·∫øt ƒë·ªÉ ch·∫°y m√† kh√¥ng g·∫∑p l·ªói datasource.


M·ªü IntelliJ IDEA v√† v√†o File -> Project Structure.
·ªû ph·∫ßn Project (ho·∫∑c Modules n·∫øu b·∫°n ƒëang l√†m vi·ªác v·ªõi m·ªôt module c·ª• th·ªÉ), ch·ªçn Project SDK l√† JDK 20 (ho·∫∑c phi√™n b·∫£n Java 20 m√† b·∫°n ƒë√£ c√†i ƒë·∫∑t).

pom.xml
<properties>
    <maven.compiler.source>20</maven.compiler.source>
    <maven.compiler.target>20</maven.compiler.target>
</properties>


-th√™m comment v·ªõi t√†i kho·∫£n
-trang c√° nh√¢n
-li√™n k·∫øt post khi b·∫•m v√†o ti√™u ƒë·ªÅ
-li√™n k·∫øt trang c√° nh√¢n khi b·∫•m v√†o name
-li√™n k·∫øt create post ·ªü trang c√° nh√¢n
-li√™n k·∫øt edit profile ·ªü trang c√° nh√¢n
-trang b√†i vi·∫øt
-ch·ªâ hi·ªán b√†i vi·∫øt success
-1 li√™n k·∫øt person v√† user ok
-2 nh·∫≠n d·∫°ng person
-trang ph√¢n quy·ªÅn 
-trang duy·ªát b√†i c·ªßa admin


<plugin>
  <groupId>com.github.eirslett</groupId>
  <artifactId>frontend-maven-plugin</artifactId>
  <executions>
      <execution>
          <id>install-node-and-npm</id>
          <goals>
              <goal>install-node-and-npm</goal>
          </goals>
          <configuration>
              <skip>true</skip> <!-- Th√™m d√≤ng n√†y ƒë·ªÉ b·ªè qua -->
          </configuration>
      </execution>
      <execution>
          <id>npm install</id>
          <goals>
              <goal>npm</goal>
          </goals>
          <configuration>
              <skip>true</skip> <!-- Th√™m d√≤ng n√†y ƒë·ªÉ b·ªè qua -->
          </configuration>
      </execution>
      <execution>
          <id>webapp build test</id>
          <goals>
              <goal>npm</goal>
          </goals>
          <phase>test</phase>
          <configuration>
              <arguments>run webapp:test</arguments>
              <npmInheritsProxyConfigFromMaven>false</npmInheritsProxyConfigFromMaven>
              <skip>true</skip> <!-- Th√™m d√≤ng n√†y ƒë·ªÉ b·ªè qua -->
          </configuration>
      </execution>
      <execution>
          <id>webapp build prod</id>
          <goals>
              <goal>npm</goal>
          </goals>
          <phase>generate-resources</phase>
          <configuration>
              <arguments>run webapp:prod</arguments>
              <environmentVariables>
                  <APP_VERSION>${project.version}</APP_VERSION>
              </environmentVariables>
              <npmInheritsProxyConfigFromMaven>false</npmInheritsProxyConfigFromMaven>
              <skip>true</skip> <!-- Th√™m d√≤ng n√†y ƒë·ªÉ b·ªè qua -->
          </configuration>
      </execution>
  </executions>
</plugin>

websocket

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-websocket</artifactId>
</dependency>

./mvnw clean install
yarn add @stomp/stompjs sockjs-client

application.yml
    kafka:
        client:
        dns:
            lookup: use_dns_cache
        bootstrap-servers: ${KAFKA_BROKER_SERVER:localhost}:${KAFKA_BROKER_PORT:9092}
        producer:
        value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
        #transaction-id-prefix: tx.
        properties:
            "[spring.json.type.mapping]": category:com.mycompany.myapp.domain.Category
        consumer:
        value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
pom.yml
    <dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
	</dependency>


////////////////////////////////////
nodejs

C√†i ƒë·∫∑t nvm:
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash 
Th√™m nvm v√†o file c·∫•u h√¨nh shell:
    N·∫øu b·∫°n d√πng zsh, th√™m v√†o ~/.zshrc:
        export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
    N·∫øu b·∫°n d√πng bash, th√™m v√†o ~/.bashrc ho·∫∑c ~/.bash_profile:
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
T·∫£i l·∫°i file c·∫•u h√¨nh shell:
    source ~/.zshrc  # ho·∫∑c source ~/.bashrc / ~/.bash_profile t√πy theo shell b·∫°n d√πng
C√†i ƒë·∫∑t phi√™n b·∫£n Node.js mong mu·ªën:
    nvm install node  # C√†i ƒë·∫∑t phi√™n b·∫£n m·ªõi nh·∫•t
    nvm install 20    # C√†i ƒë·∫∑t phi√™n b·∫£n 20
Ki·ªÉm tra phi√™n b·∫£n Node.js:
    node -v
V·ªõi nvm, b·∫°n c√≥ th·ªÉ d·ªÖ d√†ng chuy·ªÉn ƒë·ªïi gi·ªØa c√°c phi√™n b·∫£n Node.js b·∫±ng l·ªánh nvm use <version>.

jhipster docker-compose
Welcome to the JHipster Docker Compose Sub-Generator üê≥

trong jhipster java react, t√¥i c√≥ file personresource.java:
@RestController
@RequestMapping("/api")
public class PersonResource {

    private final PersonRepository personRepository;

    public PersonResource(PersonRepository personRepository) {
        this.personRepository = personRepository;
    }

    @GetMapping("/person-by-user/{userId}")
    public ResponseEntity<Person> getPersonByUserId(@PathVariable Long userId) {
        Optional<Person> person = personRepository.findOneByUserId(userId);
        return person.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }
}
v√† file personrepository:
public interface PersonRepository extends JpaRepository<Person, Long> {

    Optional<Person> findOneByUserId(Long userId);
}
ƒë·∫•y l√† file person.reducer.ts:
import axios from 'axios';
import { createAsyncThunk, isFulfilled, isPending } from '@reduxjs/toolkit';
import { ASC } from 'app/shared/util/pagination.constants';
import { cleanEntity } from 'app/shared/util/entity-utils';
import { IQueryParams, createEntitySlice, EntityState, serializeAxiosError } from 'app/shared/reducers/reducer.utils';
import { IPerson, defaultValue } from 'app/shared/model/person.model';

const initialState: EntityState<IPerson> = {
  loading: false,
  errorMessage: null,
  entities: [],
  entity: defaultValue,
  updating: false,
  updateSuccess: false,
};

const apiUrl = 'api/people';

// Actions

export const getEntities = createAsyncThunk(
  'person/fetch_entity_list',
  async ({ sort }: IQueryParams) => {
    const requestUrl = `${apiUrl}?${sort ? `sort=${sort}&` : ''}cacheBuster=${new Date().getTime()}`;
    return axios.get<IPerson[]>(requestUrl);
  },
  { serializeError: serializeAxiosError },
);

export const getEntity = createAsyncThunk(
  'person/fetch_entity',
  async (id: string | number) => {
    const requestUrl = `${apiUrl}/${id}`;
    return axios.get<IPerson>(requestUrl);
  },
  { serializeError: serializeAxiosError },
);

export const createEntity = createAsyncThunk(
  'person/create_entity',
  async (entity: IPerson, thunkAPI) => {
    const result = await axios.post<IPerson>(apiUrl, cleanEntity(entity));
    thunkAPI.dispatch(getEntities({}));
    return result;
  },
  { serializeError: serializeAxiosError },
);

export const updateEntity = createAsyncThunk(
  'person/update_entity',
  async (entity: IPerson, thunkAPI) => {
    const result = await axios.put<IPerson>(`${apiUrl}/${entity.id}`, cleanEntity(entity));
    thunkAPI.dispatch(getEntities({}));
    return result;
  },
  { serializeError: serializeAxiosError },
);

export const partialUpdateEntity = createAsyncThunk(
  'person/partial_update_entity',
  async (entity: IPerson, thunkAPI) => {
    const result = await axios.patch<IPerson>(`${apiUrl}/${entity.id}`, cleanEntity(entity));
    thunkAPI.dispatch(getEntities({}));
    return result;
  },
  { serializeError: serializeAxiosError },
);

export const deleteEntity = createAsyncThunk(
  'person/delete_entity',
  async (id: string | number, thunkAPI) => {
    const requestUrl = `${apiUrl}/${id}`;
    const result = await axios.delete<IPerson>(requestUrl);
    thunkAPI.dispatch(getEntities({}));
    return result;
  },
  { serializeError: serializeAxiosError },
);

// slice

export const PersonSlice = createEntitySlice({
  name: 'person',
  initialState,
  extraReducers(builder) {
    builder
      .addCase(getEntity.fulfilled, (state, action) => {
        state.loading = false;
        state.entity = action.payload.data;
      })
      .addCase(deleteEntity.fulfilled, state => {
        state.updating = false;
        state.updateSuccess = true;
        state.entity = {};
      })
      .addMatcher(isFulfilled(getEntities), (state, action) => {
        const { data } = action.payload;

        return {
          ...state,
          loading: false,
          entities: data.sort((a, b) => {
            if (!action.meta?.arg?.sort) {
              return 1;
            }
            const order = action.meta.arg.sort.split(',')[1];
            const predicate = action.meta.arg.sort.split(',')[0];
            return order === ASC ? (a[predicate] < b[predicate] ? -1 : 1) : b[predicate] < a[predicate] ? -1 : 1;
          }),
        };
      })
      .addMatcher(isFulfilled(createEntity, updateEntity, partialUpdateEntity), (state, action) => {
        state.updating = false;
        state.loading = false;
        state.updateSuccess = true;
        state.entity = action.payload.data;
      })
      .addMatcher(isPending(getEntities, getEntity), state => {
        state.errorMessage = null;
        state.updateSuccess = false;
        state.loading = true;
      })
      .addMatcher(isPending(createEntity, updateEntity, partialUpdateEntity, deleteEntity), state => {
        state.errorMessage = null;
        state.updateSuccess = false;
        state.updating = true;
      });
  },
});

export const { reset } = PersonSlice.actions;

// Reducer
export default PersonSlice.reducer;
l√†m sao ƒë·ªÉ t√¥i c√≥ th·ªÉ t·ª´ fronten g·ªçi api n√†y v√† l∆∞u tr·ªØ th√¥ng tin Person v√†o Redux store.